{"version":3,"sources":["points/points.js","App.js","serviceWorker.js","index.js"],"names":["allPoints","Map","ReactMapboxGl","minZoom","maxZoom","attributionControl","accessToken","circleLayout","visibility","circlePaint","StyledPopup","styled","div","App","props","state","center","zoom","circle","undefined","circleText","bounds","mapRef","React","createRef","onToggleHover","bind","cursor","this","getCanvas","style","fetchGeocoding","geometry","coordinates","setState","lng","lat","fetch","then","response","json","data","results","formatted_address","el","addImageSources","addVideoSources","addSource","type","url","renderedFeatures","PointGroups","map","group","key","id","layout","paint","features","feature","featureKey","onMouseEnter","onMouseLeave","properties","className","containerStyle","height","width","flex","onStyleLoad","mapLoaded","maxBounds","marginTop","name","sourceId","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.47f8511b.chunk.js","sourcesContent":["import BarsAndLiquor from './Bars_and_Liquor.json';\nimport BeautyAndWedding from './Beauty_and_Wedding.json';\nimport Gods from './Gods.json';\nimport GodsStores from './Gods_stores.json';\nimport GroceryStores from './Grocery_stores.json';\nimport Kitchen from './Kitchen_utensils.json';\nimport PlasticStores from './Plastic_goods_stores.json';\nimport Resturants from './Restaurant.json';\nimport ToysStores from './Toys_stores.json';\n\nvar allPoints = [BarsAndLiquor,BeautyAndWedding,Gods,GodsStores,GroceryStores,Kitchen,PlasticStores,Resturants,ToysStores]\n\nexport default allPoints;","import React from 'react';\nimport styled from 'styled-components';\nimport './App.css';\n/** Mapbox React bindings */\nimport ReactMapboxGl, {\n  Popup,\n  ScaleControl,\n  ZoomControl,\n  RotationControl,\n  Layer,\n  Feature\n} from 'react-mapbox-gl';\n\nimport PointGroups from './points/points';\n\nconst Map = ReactMapboxGl({\n  minZoom: 17,\n  maxZoom: 19,\n  attributionControl: false,\n  accessToken:'pk.eyJ1IjoiYXRsYXNtYXBnZW4iLCJhIjoiY2swbmxlN2M4MDB5ejNibWxjMXVvdGNvYSJ9.UsZbpfrkOq-cccfmnIzwPg'\n});\n\nconst circleLayout = { visibility: 'visible' };\nconst circlePaint = {\n    'circle-color': [\n        'match',\n        ['get', 'category'],\n        'bars', '#f7e1bf', //White\n        'beauty', '#7b2809', //Yellow\n        'godStores', '#242919', //Red\n        'gods', '#042986', //Green\n        'grocery', '#b9b464', //Green\n        'utensils', '#1c5d7d', //Green\n        'PlasticGoods', '#4c8fc2', //Green\n        'Restaurants', '#d9d508', //Green\n        'Toys', '#95a5b2', //Green\n\n        /* other */ '#ffa500' //Orange\n    ],\n    // 'circle-stroke-color': 'black',\n    // 'circle-stroke-width': 2,\n};\n\nconst StyledPopup = styled.div`\nbackground: white;\ncolor: #3f618c;\nfont-weight: 400;\npadding: 5px;\nborder-radius: 2px;\n`;\nclass App extends React.Component {\n\n  constructor(props) {\n      super(props);\n      this.state = {\n        center: [78.471951, 17.375770],\n        zoom: [18],\n        circle: undefined,\n        circleText: \"\",\n        bounds:[\n          [78.4640121459961, 17.370545115450106], // Southwest coordinates\n          [78.47946166992188, 17.38414271445477] // Northeast coordinates\n          ]\n      };\n      this.mapRef = React.createRef();\n      this.onToggleHover = this.onToggleHover.bind(this);\n  }\n\n  onToggleHover(cursor,circle) {\n    this.mapRef.getCanvas().style.cursor = cursor;\n    if(circle)\n      this.fetchGeocoding(circle.geometry.coordinates[0],circle.geometry.coordinates[1])\n    else\n      this.setState({circleText:\"\"})\n    this.setState({circle})\n  }\n\n  fetchGeocoding(lng,lat) {\n    fetch(\"https://maps.googleapis.com/maps/api/geocode/json?latlng=\"+lat+\",\"+lng+\"&location_type=ROOFTOP&key=AIzaSyB65tXEZQaBs23p1LToMJPX6z0C0xjJHiI\")\n    .then(response => response.json()).then(data => \n      {\n        if(data.results) \n          this.setState({circleText: data.results[0].formatted_address})\n      })\n  }\n\n    mapLoaded(el) {\n        this.mapRef = el;\n        this.addImageSources();\n        this.addVideoSources();\n    }\n\n    addImageSources() {\n\n      let imageCoordinates = \n          [\n            [\n              78.46813201904297,\n              17.376248448229056\n            ],\n            [\n              78.46877574920654,\n              17.376248448229056\n            ],\n            [\n              78.46877574920654,\n              17.37688839818374\n            ],\n            [\n              78.46813201904297,\n              17.37688839818374\n            ]\n          ]\n      this.mapRef.addSource('imstreamImage', {\n          type: 'image',\n          url: \"https://upload.wikimedia.org/wikipedia/en/9/95/Test_image.jpg\",\n          coordinates: imageCoordinates\n      });\n  }\n\n  addVideoSources() {\n\n    let videoCoordinates = \n      [\n        [\n          78.4695053100586,\n          17.37770241129391\n        ],\n        [\n          78.47014367580414,\n          17.37770241129391\n        ],\n        [\n          78.47014367580414,\n          17.3782297260311\n        ],\n        [\n          78.4695053100586,\n          17.3782297260311\n        ]\n      ]\n    this.mapRef.addSource('imstreamVideo', {\n      'type': 'video',\n      'urls': [\n          'https://static-assets.mapbox.com/mapbox-gl-js/drone.mp4',\n          'https://static-assets.mapbox.com/mapbox-gl-js/drone.webm'\n        ],\n        coordinates: videoCoordinates\n    });\n}\n\n  render() {\n\n    const {center, zoom, circle,bounds} = this.state;\n\n    const renderedFeatures = PointGroups.map((group,key) => \n      <Layer key = {key} type=\"circle\" id={\"circles-\"+key} layout={circleLayout} paint={circlePaint}>\n      {group.features.map((feature,featureKey) =>\n        <Feature\n        key={featureKey}\n        onMouseEnter={this.onToggleHover.bind(this, 'pointer',feature)}\n        onMouseLeave={this.onToggleHover.bind(this, '',undefined)}\n        coordinates={feature.geometry.coordinates}\n        properties={feature.properties}\n      />\n      )}    \n      </Layer>\n      )\n\n    return (\n      <div className=\"App\">\n        <Map\n          style=\"mapbox://styles/atlasmapgen/ckduj8k7u182l19nwt71r2cya\"\n          containerStyle={{\n              height: '100vh',\n              width: '100vw',\n              flex: 1,\n          }}\n          center={center}\n          zoom={zoom}\n          onStyleLoad={el => this.mapLoaded(el)}\n          maxBounds={bounds}\n        >\n\n          <ScaleControl />\n          <ZoomControl/>\n          <RotationControl style={{ marginTop: 10 }} />\n          {renderedFeatures}\n          {circle && (\n          <Popup coordinates={circle.geometry.coordinates}>\n            <StyledPopup>\n              <div>{circle.properties.name}</div>\n              <div>\n                {this.state.circleText}\n              </div>\n            </StyledPopup>\n          </Popup>\n        )}\n\n        <Layer\n          type={'raster'}\n          sourceId={'imstreamImage'}\n        />\n\n        <Layer\n          type={'raster'}\n          sourceId={'imstreamVideo'}\n        />\n        </Map>\n      </div>\n    );  \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}