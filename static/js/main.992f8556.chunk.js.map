{"version":3,"sources":["logo.svg","points/points.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","allPoints","Map","ReactMapboxGl","minZoom","maxZoom","attributionControl","circleLayout","visibility","circlePaint","mapStyle","App","props","state","showPopup","mapRef","React","createRef","onToggleHover","bind","event","cursor","this","getCanvas","style","e","console","log","setState","el","renderedPointGroups","PointGroups","map","group","key","id","data","circleOnMouseEnter","circleOnMouseLeave","circleOnClick","circleClicked","className","ref","containerStyle","height","width","flex","center","zoom","onStyleLoad","mapLoaded","marginTop","coordinates","popupCoord","offset","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"28mGAAAA,EAAOC,QAAU,IAA0B,kC,gKCY5BC,EAFC,C,uDCIVC,EAAMC,YAAc,CACxBC,QAAS,GACTC,QAAS,GACTC,oBAAoB,IAGhBC,EAAe,CAAEC,WAAY,WAC7BC,EAAc,CAChB,eAAgB,CACZ,QACA,CAAC,MAAO,aACR,KAAM,UACN,KAAM,UACN,KAAM,UACN,KAAM,UACM,WAEhB,sBAAuB,QACvB,sBAAuB,GAGrBC,EAAW,CACf,QAAW,EACX,QAAW,CACX,eAAgB,CAChB,KAAQ,SACR,MAAS,CAAE,oDACX,SAAY,MAGZ,OAAU,CAAC,CACX,GAAM,eACN,KAAQ,SACR,OAAU,eACV,QAAW,EACX,QAAW,MAmFEC,E,kDAxEb,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACXC,WAAW,GAEb,EAAKC,OAASC,IAAMC,YACpB,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBANN,E,0DAaLC,EAAMC,GAClBC,KAAKP,OAAOQ,YAAYC,MAAMH,OAASA,I,oCAG3BI,GACZC,QAAQC,IAAIF,GACZH,KAAKM,SAAS,CAACd,WAAWQ,KAAKT,MAAMC,c,gCAE7Be,GACRP,KAAKP,OAASc,I,+BAEN,IAAD,OAEDC,EAAsBC,EAAYC,KAAI,SAACC,EAAMC,GAAP,OACxC,kBAAC,IAAD,CACAC,GAAI,WAAWD,EACfE,KAAMH,EACN1B,aAAcA,EACdE,YAAaA,EACb4B,mBAAoB,SAAAZ,GAAC,OAAI,EAAKP,cAAcO,EAAE,YAC9Ca,mBAAoB,SAAAb,GAAC,OAAI,EAAKP,cAAcO,EAAE,KAC9Cc,cAAe,SAAAd,GAAC,OAAI,EAAKe,cAAcf,SAG3C,OACE,yBAAKgB,UAAU,OACb,kBAACvC,EAAD,CACEwC,IAAKpB,KAAKP,OACVS,MAAOd,EACPiC,eAAgB,CACZC,OAAQ,QACRC,MAAO,QACPC,KAAM,GAEVC,OAAQ,CAAC,iBAAkB,WAC3BC,KAAM,CAAC,IACPC,YAAa,SAAApB,GAAE,OAAI,EAAKqB,UAAUrB,KAKjCC,EACD,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAiBN,MAAO,CAAE2B,UAAW,MAEpC7B,KAAKT,MAAMC,UAAY,kBAAC,IAAD,CACtBsC,YAAa9B,KAAKT,MAAMwC,WACxBC,OAAQ,CACN,cAAe,CAAC,IAAK,IAAM,OAAU,CAAC,GAAI,IAAK,eAAgB,EAAE,IAAK,MAExE,kDACS,W,GAnEHtC,IAAMuC,WC9CJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMC,c","file":"static/js/main.992f8556.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import BarsAndLiquor from './Bars_and_Liquor.json';\nimport BeautyAndWedding from './Beauty_and_Wedding.json';\nimport Gods from './Gods.json';\nimport GodsStores from './Gods_stores.json';\nimport GroceryStores from './Grocery_stores.json';\nimport Kitchen from './Kitchen_utensils.json';\nimport PlasticStores from './Plastic_goods_stores.json';\nimport Resturants from './Restaurant.json';\nimport ToysStores from './Toys_stores.json';\n\nvar allPoints = [BarsAndLiquor,BeautyAndWedding,Gods,GodsStores,GroceryStores,Kitchen,PlasticStores,Resturants,ToysStores]\n\nexport default allPoints;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n/** Mapbox React bindings */\nimport ReactMapboxGl, {\n  Popup,\n  ScaleControl,\n  ZoomControl,\n  RotationControl,\n  GeoJSONLayer,\n} from 'react-mapbox-gl';\n\nimport PointGroups from './points/points';\n\nconst Map = ReactMapboxGl({\n  minZoom: 10,\n  maxZoom: 19,\n  attributionControl: false,\n});\n\nconst circleLayout = { visibility: 'visible' };\nconst circlePaint = {\n    'circle-color': [\n        'match',\n        ['get', 'colorProp'],\n        'c1', '#FFFFFF', //White\n        'c2', '#FFFF66', //Yellow\n        'c3', '#FF0000', //Red\n        'c4', '#00FF00', //Green\n        /* other */ '#ffa500' //Orange\n    ],\n    'circle-stroke-color': 'black',\n    'circle-stroke-width': 2,\n};\n\nconst mapStyle = {\n  \"version\": 8,\n  \"sources\": {\n  \"raster-tiles\": {\n  \"type\": \"raster\",\n  \"tiles\": [ \"https://a.tile.openstreetmap.org/{z}/{x}/{y}.png\"],\n  \"tileSize\": 256\n  }\n  },\n  \"layers\": [{\n  \"id\": \"simple-tiles\",\n  \"type\": \"raster\",\n  \"source\": \"raster-tiles\",\n  \"minzoom\": 0,\n  \"maxzoom\": 22\n  }]\n}\n\nvar bounds = [\n  [78.461681, 17.370974], // Southwest coordinates\n  [78.478309, 17.381066] // Northeast coordinates\n  ];\n\nclass App extends React.Component {\n\n  constructor(props) {\n      super(props);\n      this.state = {\n        showPopup: false\n      };\n      this.mapRef = React.createRef();\n      this.onToggleHover = this.onToggleHover.bind(this);\n  }\n  /**\n   * This method is triggered when the user hovers the mouse over an image stream marker. The mouse cursor becomes a pointer. \n   * @param {*} cursor  Value of the cursor style. (e.g. pointer or default)\n   * @public\n   */\n  onToggleHover(event,cursor) {\n    this.mapRef.getCanvas().style.cursor = cursor;\n  }\n\n  circleClicked(e) {\n    console.log(e)\n    this.setState({showPopup:!this.state.showPopup})\n  }\n  mapLoaded(el) {\n    this.mapRef = el;\n  }\n  render() {\n\n    const renderedPointGroups = PointGroups.map((group,key) =>\n        <GeoJSONLayer\n        id={'geojson-'+key}\n        data={group}\n        circleLayout={circleLayout}\n        circlePaint={circlePaint}\n        circleOnMouseEnter={e => this.onToggleHover(e,'pointer')}\n        circleOnMouseLeave={e => this.onToggleHover(e,'')}\n        circleOnClick={e => this.circleClicked(e)}\n    />\n    )\n    return (\n      <div className=\"App\">\n        <Map\n          ref={this.mapRef}\n          style={mapStyle}\n          containerStyle={{\n              height: '100vh',\n              width: '100vw',\n              flex: 1,\n          }}\n          center={[78.4727594999999, 17.386106]}\n          zoom={[18]}\n          onStyleLoad={el => this.mapLoaded(el)}\n\n          // maxBounds={bounds}\n        >\n\n          {renderedPointGroups}\n          <ScaleControl />\n          <ZoomControl/>\n          <RotationControl style={{ marginTop: 10 }} />\n\n          {this.state.showPopup ? <Popup\n            coordinates={this.state.popupCoord}\n            offset={{\n              'bottom-left': [12, -38],  'bottom': [0, -38], 'bottom-right': [-12, -38]\n            }}>\n            <h1>BHAVANI WINE SHOP</h1>\n          </Popup> : null}\n        </Map>\n      </div>\n    );  \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}